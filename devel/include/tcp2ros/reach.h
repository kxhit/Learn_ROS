// Generated by gencpp from file tcp2ros/reach.msg
// DO NOT EDIT!


#ifndef TCP2ROS_MESSAGE_REACH_H
#define TCP2ROS_MESSAGE_REACH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tcp2ros
{
template <class ContainerAllocator>
struct reach_
{
  typedef reach_<ContainerAllocator> Type;

  reach_()
    : time()
    , reach(0)  {
    }
  reach_(const ContainerAllocator& _alloc)
    : time()
    , reach(0)  {
  (void)_alloc;
    }



   typedef ros::Time _time_type;
  _time_type time;

   typedef int32_t _reach_type;
  _reach_type reach;





  typedef boost::shared_ptr< ::tcp2ros::reach_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tcp2ros::reach_<ContainerAllocator> const> ConstPtr;

}; // struct reach_

typedef ::tcp2ros::reach_<std::allocator<void> > reach;

typedef boost::shared_ptr< ::tcp2ros::reach > reachPtr;
typedef boost::shared_ptr< ::tcp2ros::reach const> reachConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tcp2ros::reach_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tcp2ros::reach_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tcp2ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'tcp2ros': ['/home/kx/catkin_ws/src/tcp2ros/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tcp2ros::reach_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tcp2ros::reach_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tcp2ros::reach_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tcp2ros::reach_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcp2ros::reach_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcp2ros::reach_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tcp2ros::reach_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2dcc348a5da28ada0f2c0d073cc9de9a";
  }

  static const char* value(const ::tcp2ros::reach_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2dcc348a5da28adaULL;
  static const uint64_t static_value2 = 0x0f2c0d073cc9de9aULL;
};

template<class ContainerAllocator>
struct DataType< ::tcp2ros::reach_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tcp2ros/reach";
  }

  static const char* value(const ::tcp2ros::reach_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tcp2ros::reach_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time time\n\
int32 reach\n\
";
  }

  static const char* value(const ::tcp2ros::reach_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tcp2ros::reach_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.reach);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct reach_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tcp2ros::reach_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tcp2ros::reach_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "reach: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reach);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TCP2ROS_MESSAGE_REACH_H
