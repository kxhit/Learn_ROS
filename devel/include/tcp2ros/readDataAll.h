// Generated by gencpp from file tcp2ros/readDataAll.msg
// DO NOT EDIT!


#ifndef TCP2ROS_MESSAGE_READDATAALL_H
#define TCP2ROS_MESSAGE_READDATAALL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tcp2ros
{
template <class ContainerAllocator>
struct readDataAll_
{
  typedef readDataAll_<ContainerAllocator> Type;

  readDataAll_()
    : time()
    , odom1(0)
    , odom2(0)
    , odom3(0)
    , odom4(0)
    , mode(0)
    , tank_id(0)
    , track_point_id(0)
    , first_alignment(0)
    , laser_alignment(0)
    , distance_alignment(0.0)
    , Pillar_distance(0.0)
    , pause(0)
    , stop(0)
    , back_home(0)
    , other_car_x(0.0)
    , other_car_y(0.0)
    , other_car_theta(0.0)
    , infrared_right(0.0)
    , infrared_left(0.0)
    , is_start_camera(0)
    , next_target_num(0)
    , control1(0)
    , control2(0)
    , control3(0)
    , control4(0)  {
    }
  readDataAll_(const ContainerAllocator& _alloc)
    : time()
    , odom1(0)
    , odom2(0)
    , odom3(0)
    , odom4(0)
    , mode(0)
    , tank_id(0)
    , track_point_id(0)
    , first_alignment(0)
    , laser_alignment(0)
    , distance_alignment(0.0)
    , Pillar_distance(0.0)
    , pause(0)
    , stop(0)
    , back_home(0)
    , other_car_x(0.0)
    , other_car_y(0.0)
    , other_car_theta(0.0)
    , infrared_right(0.0)
    , infrared_left(0.0)
    , is_start_camera(0)
    , next_target_num(0)
    , control1(0)
    , control2(0)
    , control3(0)
    , control4(0)  {
  (void)_alloc;
    }



   typedef ros::Time _time_type;
  _time_type time;

   typedef int32_t _odom1_type;
  _odom1_type odom1;

   typedef int32_t _odom2_type;
  _odom2_type odom2;

   typedef int32_t _odom3_type;
  _odom3_type odom3;

   typedef int32_t _odom4_type;
  _odom4_type odom4;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef int32_t _tank_id_type;
  _tank_id_type tank_id;

   typedef int32_t _track_point_id_type;
  _track_point_id_type track_point_id;

   typedef int32_t _first_alignment_type;
  _first_alignment_type first_alignment;

   typedef int32_t _laser_alignment_type;
  _laser_alignment_type laser_alignment;

   typedef float _distance_alignment_type;
  _distance_alignment_type distance_alignment;

   typedef float _Pillar_distance_type;
  _Pillar_distance_type Pillar_distance;

   typedef int32_t _pause_type;
  _pause_type pause;

   typedef int32_t _stop_type;
  _stop_type stop;

   typedef int32_t _back_home_type;
  _back_home_type back_home;

   typedef float _other_car_x_type;
  _other_car_x_type other_car_x;

   typedef float _other_car_y_type;
  _other_car_y_type other_car_y;

   typedef float _other_car_theta_type;
  _other_car_theta_type other_car_theta;

   typedef float _infrared_right_type;
  _infrared_right_type infrared_right;

   typedef float _infrared_left_type;
  _infrared_left_type infrared_left;

   typedef int32_t _is_start_camera_type;
  _is_start_camera_type is_start_camera;

   typedef int32_t _next_target_num_type;
  _next_target_num_type next_target_num;

   typedef int32_t _control1_type;
  _control1_type control1;

   typedef int32_t _control2_type;
  _control2_type control2;

   typedef int32_t _control3_type;
  _control3_type control3;

   typedef int32_t _control4_type;
  _control4_type control4;





  typedef boost::shared_ptr< ::tcp2ros::readDataAll_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tcp2ros::readDataAll_<ContainerAllocator> const> ConstPtr;

}; // struct readDataAll_

typedef ::tcp2ros::readDataAll_<std::allocator<void> > readDataAll;

typedef boost::shared_ptr< ::tcp2ros::readDataAll > readDataAllPtr;
typedef boost::shared_ptr< ::tcp2ros::readDataAll const> readDataAllConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tcp2ros::readDataAll_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tcp2ros::readDataAll_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tcp2ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'tcp2ros': ['/home/kx/catkin_ws/src/tcp2ros/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tcp2ros::readDataAll_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tcp2ros::readDataAll_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tcp2ros::readDataAll_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tcp2ros::readDataAll_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcp2ros::readDataAll_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcp2ros::readDataAll_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tcp2ros::readDataAll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "965a724e29296364637aadf1b2f664ed";
  }

  static const char* value(const ::tcp2ros::readDataAll_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x965a724e29296364ULL;
  static const uint64_t static_value2 = 0x637aadf1b2f664edULL;
};

template<class ContainerAllocator>
struct DataType< ::tcp2ros::readDataAll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tcp2ros/readDataAll";
  }

  static const char* value(const ::tcp2ros::readDataAll_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tcp2ros::readDataAll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time time\n\
int32 odom1\n\
int32 odom2\n\
int32 odom3\n\
int32 odom4\n\
int32 mode\n\
int32 tank_id\n\
int32 track_point_id\n\
int32 first_alignment\n\
int32 laser_alignment\n\
float32 distance_alignment\n\
float32 Pillar_distance\n\
int32 pause\n\
int32 stop\n\
int32 back_home\n\
float32 other_car_x\n\
float32 other_car_y\n\
float32 other_car_theta\n\
float32 infrared_right\n\
float32 infrared_left\n\
int32 is_start_camera\n\
int32 next_target_num\n\
int32 control1\n\
int32 control2\n\
int32 control3\n\
int32 control4\n\
";
  }

  static const char* value(const ::tcp2ros::readDataAll_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tcp2ros::readDataAll_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.odom1);
      stream.next(m.odom2);
      stream.next(m.odom3);
      stream.next(m.odom4);
      stream.next(m.mode);
      stream.next(m.tank_id);
      stream.next(m.track_point_id);
      stream.next(m.first_alignment);
      stream.next(m.laser_alignment);
      stream.next(m.distance_alignment);
      stream.next(m.Pillar_distance);
      stream.next(m.pause);
      stream.next(m.stop);
      stream.next(m.back_home);
      stream.next(m.other_car_x);
      stream.next(m.other_car_y);
      stream.next(m.other_car_theta);
      stream.next(m.infrared_right);
      stream.next(m.infrared_left);
      stream.next(m.is_start_camera);
      stream.next(m.next_target_num);
      stream.next(m.control1);
      stream.next(m.control2);
      stream.next(m.control3);
      stream.next(m.control4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct readDataAll_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tcp2ros::readDataAll_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tcp2ros::readDataAll_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "odom1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.odom1);
    s << indent << "odom2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.odom2);
    s << indent << "odom3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.odom3);
    s << indent << "odom4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.odom4);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "tank_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tank_id);
    s << indent << "track_point_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.track_point_id);
    s << indent << "first_alignment: ";
    Printer<int32_t>::stream(s, indent + "  ", v.first_alignment);
    s << indent << "laser_alignment: ";
    Printer<int32_t>::stream(s, indent + "  ", v.laser_alignment);
    s << indent << "distance_alignment: ";
    Printer<float>::stream(s, indent + "  ", v.distance_alignment);
    s << indent << "Pillar_distance: ";
    Printer<float>::stream(s, indent + "  ", v.Pillar_distance);
    s << indent << "pause: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pause);
    s << indent << "stop: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stop);
    s << indent << "back_home: ";
    Printer<int32_t>::stream(s, indent + "  ", v.back_home);
    s << indent << "other_car_x: ";
    Printer<float>::stream(s, indent + "  ", v.other_car_x);
    s << indent << "other_car_y: ";
    Printer<float>::stream(s, indent + "  ", v.other_car_y);
    s << indent << "other_car_theta: ";
    Printer<float>::stream(s, indent + "  ", v.other_car_theta);
    s << indent << "infrared_right: ";
    Printer<float>::stream(s, indent + "  ", v.infrared_right);
    s << indent << "infrared_left: ";
    Printer<float>::stream(s, indent + "  ", v.infrared_left);
    s << indent << "is_start_camera: ";
    Printer<int32_t>::stream(s, indent + "  ", v.is_start_camera);
    s << indent << "next_target_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_target_num);
    s << indent << "control1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control1);
    s << indent << "control2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control2);
    s << indent << "control3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control3);
    s << indent << "control4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TCP2ROS_MESSAGE_READDATAALL_H
