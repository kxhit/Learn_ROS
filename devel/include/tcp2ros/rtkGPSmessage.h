// Generated by gencpp from file tcp2ros/rtkGPSmessage.msg
// DO NOT EDIT!


#ifndef TCP2ROS_MESSAGE_RTKGPSMESSAGE_H
#define TCP2ROS_MESSAGE_RTKGPSMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tcp2ros
{
template <class ContainerAllocator>
struct rtkGPSmessage_
{
  typedef rtkGPSmessage_<ContainerAllocator> Type;

  rtkGPSmessage_()
    : ROS_time()
    , GPS_time()
    , vaild_flag(false)
    , flash_state()
    , north_meter(0.0)
    , east_meter(0.0)
    , yaw_rad(0.0)  {
    }
  rtkGPSmessage_(const ContainerAllocator& _alloc)
    : ROS_time()
    , GPS_time(_alloc)
    , vaild_flag(false)
    , flash_state(_alloc)
    , north_meter(0.0)
    , east_meter(0.0)
    , yaw_rad(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _ROS_time_type;
  _ROS_time_type ROS_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _GPS_time_type;
  _GPS_time_type GPS_time;

   typedef uint8_t _vaild_flag_type;
  _vaild_flag_type vaild_flag;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _flash_state_type;
  _flash_state_type flash_state;

   typedef double _north_meter_type;
  _north_meter_type north_meter;

   typedef double _east_meter_type;
  _east_meter_type east_meter;

   typedef double _yaw_rad_type;
  _yaw_rad_type yaw_rad;





  typedef boost::shared_ptr< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> const> ConstPtr;

}; // struct rtkGPSmessage_

typedef ::tcp2ros::rtkGPSmessage_<std::allocator<void> > rtkGPSmessage;

typedef boost::shared_ptr< ::tcp2ros::rtkGPSmessage > rtkGPSmessagePtr;
typedef boost::shared_ptr< ::tcp2ros::rtkGPSmessage const> rtkGPSmessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tcp2ros::rtkGPSmessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tcp2ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'tcp2ros': ['/home/kx/catkin_ws/src/tcp2ros/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "579fa07aed9107c31ed915330a747d64";
  }

  static const char* value(const ::tcp2ros::rtkGPSmessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x579fa07aed9107c3ULL;
  static const uint64_t static_value2 = 0x1ed915330a747d64ULL;
};

template<class ContainerAllocator>
struct DataType< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tcp2ros/rtkGPSmessage";
  }

  static const char* value(const ::tcp2ros::rtkGPSmessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time ROS_time\n\
string GPS_time\n\
bool vaild_flag\n\
string flash_state\n\
float64 north_meter\n\
float64 east_meter\n\
float64 yaw_rad\n\
\n\
";
  }

  static const char* value(const ::tcp2ros::rtkGPSmessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ROS_time);
      stream.next(m.GPS_time);
      stream.next(m.vaild_flag);
      stream.next(m.flash_state);
      stream.next(m.north_meter);
      stream.next(m.east_meter);
      stream.next(m.yaw_rad);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rtkGPSmessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tcp2ros::rtkGPSmessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tcp2ros::rtkGPSmessage_<ContainerAllocator>& v)
  {
    s << indent << "ROS_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.ROS_time);
    s << indent << "GPS_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.GPS_time);
    s << indent << "vaild_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vaild_flag);
    s << indent << "flash_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.flash_state);
    s << indent << "north_meter: ";
    Printer<double>::stream(s, indent + "  ", v.north_meter);
    s << indent << "east_meter: ";
    Printer<double>::stream(s, indent + "  ", v.east_meter);
    s << indent << "yaw_rad: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rad);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TCP2ROS_MESSAGE_RTKGPSMESSAGE_H
