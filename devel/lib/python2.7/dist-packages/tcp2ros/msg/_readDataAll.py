# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tcp2ros/readDataAll.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class readDataAll(genpy.Message):
  _md5sum = "965a724e29296364637aadf1b2f664ed"
  _type = "tcp2ros/readDataAll"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time time
int32 odom1
int32 odom2
int32 odom3
int32 odom4
int32 mode
int32 tank_id
int32 track_point_id
int32 first_alignment
int32 laser_alignment
float32 distance_alignment
float32 Pillar_distance
int32 pause
int32 stop
int32 back_home
float32 other_car_x
float32 other_car_y
float32 other_car_theta
float32 infrared_right
float32 infrared_left
int32 is_start_camera
int32 next_target_num
int32 control1
int32 control2
int32 control3
int32 control4
"""
  __slots__ = ['time','odom1','odom2','odom3','odom4','mode','tank_id','track_point_id','first_alignment','laser_alignment','distance_alignment','Pillar_distance','pause','stop','back_home','other_car_x','other_car_y','other_car_theta','infrared_right','infrared_left','is_start_camera','next_target_num','control1','control2','control3','control4']
  _slot_types = ['time','int32','int32','int32','int32','int32','int32','int32','int32','int32','float32','float32','int32','int32','int32','float32','float32','float32','float32','float32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,odom1,odom2,odom3,odom4,mode,tank_id,track_point_id,first_alignment,laser_alignment,distance_alignment,Pillar_distance,pause,stop,back_home,other_car_x,other_car_y,other_car_theta,infrared_right,infrared_left,is_start_camera,next_target_num,control1,control2,control3,control4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(readDataAll, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = genpy.Time()
      if self.odom1 is None:
        self.odom1 = 0
      if self.odom2 is None:
        self.odom2 = 0
      if self.odom3 is None:
        self.odom3 = 0
      if self.odom4 is None:
        self.odom4 = 0
      if self.mode is None:
        self.mode = 0
      if self.tank_id is None:
        self.tank_id = 0
      if self.track_point_id is None:
        self.track_point_id = 0
      if self.first_alignment is None:
        self.first_alignment = 0
      if self.laser_alignment is None:
        self.laser_alignment = 0
      if self.distance_alignment is None:
        self.distance_alignment = 0.
      if self.Pillar_distance is None:
        self.Pillar_distance = 0.
      if self.pause is None:
        self.pause = 0
      if self.stop is None:
        self.stop = 0
      if self.back_home is None:
        self.back_home = 0
      if self.other_car_x is None:
        self.other_car_x = 0.
      if self.other_car_y is None:
        self.other_car_y = 0.
      if self.other_car_theta is None:
        self.other_car_theta = 0.
      if self.infrared_right is None:
        self.infrared_right = 0.
      if self.infrared_left is None:
        self.infrared_left = 0.
      if self.is_start_camera is None:
        self.is_start_camera = 0
      if self.next_target_num is None:
        self.next_target_num = 0
      if self.control1 is None:
        self.control1 = 0
      if self.control2 is None:
        self.control2 = 0
      if self.control3 is None:
        self.control3 = 0
      if self.control4 is None:
        self.control4 = 0
    else:
      self.time = genpy.Time()
      self.odom1 = 0
      self.odom2 = 0
      self.odom3 = 0
      self.odom4 = 0
      self.mode = 0
      self.tank_id = 0
      self.track_point_id = 0
      self.first_alignment = 0
      self.laser_alignment = 0
      self.distance_alignment = 0.
      self.Pillar_distance = 0.
      self.pause = 0
      self.stop = 0
      self.back_home = 0
      self.other_car_x = 0.
      self.other_car_y = 0.
      self.other_car_theta = 0.
      self.infrared_right = 0.
      self.infrared_left = 0.
      self.is_start_camera = 0
      self.next_target_num = 0
      self.control1 = 0
      self.control2 = 0
      self.control3 = 0
      self.control4 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I9i2f3i5f6i().pack(_x.time.secs, _x.time.nsecs, _x.odom1, _x.odom2, _x.odom3, _x.odom4, _x.mode, _x.tank_id, _x.track_point_id, _x.first_alignment, _x.laser_alignment, _x.distance_alignment, _x.Pillar_distance, _x.pause, _x.stop, _x.back_home, _x.other_car_x, _x.other_car_y, _x.other_car_theta, _x.infrared_right, _x.infrared_left, _x.is_start_camera, _x.next_target_num, _x.control1, _x.control2, _x.control3, _x.control4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.time is None:
        self.time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 108
      (_x.time.secs, _x.time.nsecs, _x.odom1, _x.odom2, _x.odom3, _x.odom4, _x.mode, _x.tank_id, _x.track_point_id, _x.first_alignment, _x.laser_alignment, _x.distance_alignment, _x.Pillar_distance, _x.pause, _x.stop, _x.back_home, _x.other_car_x, _x.other_car_y, _x.other_car_theta, _x.infrared_right, _x.infrared_left, _x.is_start_camera, _x.next_target_num, _x.control1, _x.control2, _x.control3, _x.control4,) = _get_struct_2I9i2f3i5f6i().unpack(str[start:end])
      self.time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I9i2f3i5f6i().pack(_x.time.secs, _x.time.nsecs, _x.odom1, _x.odom2, _x.odom3, _x.odom4, _x.mode, _x.tank_id, _x.track_point_id, _x.first_alignment, _x.laser_alignment, _x.distance_alignment, _x.Pillar_distance, _x.pause, _x.stop, _x.back_home, _x.other_car_x, _x.other_car_y, _x.other_car_theta, _x.infrared_right, _x.infrared_left, _x.is_start_camera, _x.next_target_num, _x.control1, _x.control2, _x.control3, _x.control4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.time is None:
        self.time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 108
      (_x.time.secs, _x.time.nsecs, _x.odom1, _x.odom2, _x.odom3, _x.odom4, _x.mode, _x.tank_id, _x.track_point_id, _x.first_alignment, _x.laser_alignment, _x.distance_alignment, _x.Pillar_distance, _x.pause, _x.stop, _x.back_home, _x.other_car_x, _x.other_car_y, _x.other_car_theta, _x.infrared_right, _x.infrared_left, _x.is_start_camera, _x.next_target_num, _x.control1, _x.control2, _x.control3, _x.control4,) = _get_struct_2I9i2f3i5f6i().unpack(str[start:end])
      self.time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I9i2f3i5f6i = None
def _get_struct_2I9i2f3i5f6i():
    global _struct_2I9i2f3i5f6i
    if _struct_2I9i2f3i5f6i is None:
        _struct_2I9i2f3i5f6i = struct.Struct("<2I9i2f3i5f6i")
    return _struct_2I9i2f3i5f6i
